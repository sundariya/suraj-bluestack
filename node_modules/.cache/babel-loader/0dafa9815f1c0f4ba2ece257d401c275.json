{"ast":null,"code":"import { GET_CAMPAIGN_LIST, UPDATE_CAMPAIGN_TYPE, SET_SELECTED_CAMPAIGN, CAMPAIGN_TYPE } from \"src/store/actionConstant\";\nimport campaigns from 'src/store/campaign';\n/*\n    Return data based on campaign Type(Upcoming, live and past) and will trigger when user switch tabs\n    Upcoming: In case of Upcoming, It will return all the record with createdOn date is greater than today date\n    Live: In case of Live, It will return all the record with createdOn date is equal to today date\n    Past: In case of Past, It will return all the record with createdOn date is less than today date\n */\n\nconst getCampaignListData = campaignReducerData => {\n  const retObj = {\n    campaignList: campaignReducerData.campaignLSData ? campaignReducerData.campaignLSData : campaigns.data\n  };\n  const todatDate = new Date();\n  todatDate.setHours(0, 0, 0, 0);\n\n  switch (campaignReducerData.campaignType) {\n    case CAMPAIGN_TYPE.UPCOMING:\n      retObj.campaignList = retObj.campaignList.filter(campaign => {\n        const campaignDate = new Date(campaign.createdOn);\n        campaignDate.setHours(0, 0, 0, 0);\n        return todatDate < campaignDate;\n      });\n      break;\n\n    case CAMPAIGN_TYPE.LIVE:\n      retObj.campaignList = retObj.campaignList.filter(campaign => {\n        const campaignDate = new Date(campaign.createdOn);\n        campaignDate.setHours(0, 0, 0, 0);\n        return todatDate.toString() === campaignDate.toString();\n      });\n      break;\n\n    case CAMPAIGN_TYPE.PAST:\n      retObj.campaignList = retObj.campaignList.filter(campaign => {\n        const campaignDate = new Date(campaign.createdOn);\n        campaignDate.setHours(0, 0, 0, 0);\n        return todatDate > campaignDate;\n      });\n      break;\n\n    default:\n      return true;\n  }\n\n  return retObj;\n};\n/*\n    Called first time when user reloads the browser\n */\n\n\nexport const getCampaignList = () => {\n  return (dispatch, getState) => {\n    if (!localStorage.getItem('campaignList')) {\n      const dataToUpdateLocalStorage = [];\n\n      for (let i = 0; i < campaigns.data.length; i++) {\n        const campaignObj = campaigns.data[i];\n        dataToUpdateLocalStorage.push(campaignObj);\n      }\n\n      localStorage.setItem('campaignList', JSON.stringify(dataToUpdateLocalStorage));\n    }\n\n    const campaignReducerData = getState().campaignReducer;\n    const campaignListObj = getCampaignListData(campaignReducerData);\n    dispatch({\n      type: GET_CAMPAIGN_LIST,\n      payload: {\n        campaignList: campaignListObj.campaignList\n      }\n    });\n  };\n};\n/*\n    Called when when user switch the tabs\n */\n\nexport const updateCampaignType = campaignType => {\n  return (dispatch, getState) => {\n    dispatch({\n      type: UPDATE_CAMPAIGN_TYPE,\n      payload: campaignType\n    });\n    const campaignReducerData = getState().campaignReducer;\n    const campaignListObj = getCampaignListData(campaignReducerData);\n    dispatch({\n      type: GET_CAMPAIGN_LIST,\n      payload: {\n        campaignList: campaignListObj.campaignList\n      }\n    });\n  };\n};\n/*\n    Called when user re-schedule campaign using calander\n */\n\nexport const scheduleAgain = (id, date) => {\n  return (dispatch, getState) => {\n    const campaignReducerData = getState().campaignReducer;\n    const dataToUpdateLocalStorage = campaignReducerData.campaignLSData ? campaignReducerData.campaignLSData : campaigns.data;\n\n    for (let i = 0; i < dataToUpdateLocalStorage.length; i++) {\n      if (id === dataToUpdateLocalStorage[i].id) {\n        dataToUpdateLocalStorage[i].createdOn = date;\n      }\n    }\n\n    localStorage.setItem('campaignList', JSON.stringify(dataToUpdateLocalStorage));\n    const campaignListObj = getCampaignListData(campaignReducerData);\n    dispatch({\n      type: GET_CAMPAIGN_LIST,\n      payload: {\n        campaignList: campaignListObj.campaignList\n      }\n    });\n  };\n};\n/*\n    Called when user click on View Price link to see pricing details\n */\n\nexport const setSelectedCampaign = campaignDetail => {\n  return dispatch => {\n    dispatch({\n      type: SET_SELECTED_CAMPAIGN,\n      payload: campaignDetail\n    });\n  };\n};","map":{"version":3,"sources":["/home/sundariya/work/bluestack/src/store/action/campaignAction.js"],"names":["GET_CAMPAIGN_LIST","UPDATE_CAMPAIGN_TYPE","SET_SELECTED_CAMPAIGN","CAMPAIGN_TYPE","campaigns","getCampaignListData","campaignReducerData","retObj","campaignList","campaignLSData","data","todatDate","Date","setHours","campaignType","UPCOMING","filter","campaign","campaignDate","createdOn","LIVE","toString","PAST","getCampaignList","dispatch","getState","localStorage","getItem","dataToUpdateLocalStorage","i","length","campaignObj","push","setItem","JSON","stringify","campaignReducer","campaignListObj","type","payload","updateCampaignType","scheduleAgain","id","date","setSelectedCampaign","campaignDetail"],"mappings":"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","sourcesContent":["import {GET_CAMPAIGN_LIST, UPDATE_CAMPAIGN_TYPE, SET_SELECTED_CAMPAIGN, CAMPAIGN_TYPE} from \"src/store/actionConstant\";\nimport campaigns from 'src/store/campaign';\n\n/*\n    Return data based on campaign Type(Upcoming, live and past) and will trigger when user switch tabs\n    Upcoming: In case of Upcoming, It will return all the record with createdOn date is greater than today date\n    Live: In case of Live, It will return all the record with createdOn date is equal to today date\n    Past: In case of Past, It will return all the record with createdOn date is less than today date\n */\nconst getCampaignListData = (campaignReducerData) => {\n    const retObj = {\n        campaignList: campaignReducerData.campaignLSData ? campaignReducerData.campaignLSData : campaigns.data\n    }\n    const todatDate = new Date();\n    todatDate.setHours(0,0,0,0);\n    switch (campaignReducerData.campaignType) {\n        case CAMPAIGN_TYPE.UPCOMING:\n            retObj.campaignList = retObj.campaignList.filter( campaign => {\n                const campaignDate = new Date(campaign.createdOn);\n                campaignDate.setHours(0,0, 0, 0);\n                return todatDate < campaignDate;\n            });\n            break;\n\n        case CAMPAIGN_TYPE.LIVE:\n            retObj.campaignList = retObj.campaignList.filter( campaign => {\n                const campaignDate = new Date(campaign.createdOn);\n                campaignDate.setHours(0,0, 0, 0);\n                return todatDate.toString() === campaignDate.toString();\n            });\n            break;\n\n        case CAMPAIGN_TYPE.PAST:\n            retObj.campaignList = retObj.campaignList.filter( campaign => {\n                const campaignDate = new Date(campaign.createdOn);\n                campaignDate.setHours(0,0, 0, 0);\n                return todatDate > campaignDate;\n            });\n            break;\n        default:\n            return true;\n\n    }\n    return retObj;\n}\n\n/*\n    Called first time when user reloads the browser\n */\nexport const getCampaignList = () => {\n    return (dispatch, getState) => {\n        if (!localStorage.getItem('campaignList')) {\n            const dataToUpdateLocalStorage = [];\n            for(let i=0; i<campaigns.data.length; i++) {\n                const campaignObj = campaigns.data[i];\n                dataToUpdateLocalStorage.push(campaignObj);\n            }\n            localStorage.setItem('campaignList', JSON.stringify(dataToUpdateLocalStorage));\n        }\n        const campaignReducerData = getState().campaignReducer;\n\n        const campaignListObj = getCampaignListData(campaignReducerData);\n\n        dispatch({type: GET_CAMPAIGN_LIST,\n            payload: {campaignList: campaignListObj.campaignList}});\n    }\n}\n\n/*\n    Called when when user switch the tabs\n */\nexport const updateCampaignType = (campaignType) => {\n    return (dispatch, getState) => {\n        dispatch({type: UPDATE_CAMPAIGN_TYPE, payload: campaignType});\n        const campaignReducerData = getState().campaignReducer;\n\n        const campaignListObj = getCampaignListData(campaignReducerData);\n\n        dispatch({type: GET_CAMPAIGN_LIST,\n            payload: {campaignList: campaignListObj.campaignList}});\n    }\n}\n\n/*\n    Called when user re-schedule campaign using calander\n */\nexport const scheduleAgain = (id, date) => {\n    return (dispatch, getState) => {\n        const campaignReducerData = getState().campaignReducer;\n\n        const dataToUpdateLocalStorage = campaignReducerData.campaignLSData ? campaignReducerData.campaignLSData : campaigns.data;\n        for(let i=0; i<dataToUpdateLocalStorage.length; i++) {\n            if (id === dataToUpdateLocalStorage[i].id) {\n                dataToUpdateLocalStorage[i].createdOn = date;\n            }\n        }\n        localStorage.setItem('campaignList', JSON.stringify(dataToUpdateLocalStorage));\n\n        const campaignListObj = getCampaignListData(campaignReducerData);\n\n        dispatch({type: GET_CAMPAIGN_LIST,\n            payload: {campaignList: campaignListObj.campaignList}});\n    }\n}\n\n/*\n    Called when user click on View Price link to see pricing details\n */\nexport const setSelectedCampaign = (campaignDetail) => {\n    return (dispatch) => {\n        dispatch({type: SET_SELECTED_CAMPAIGN, payload: campaignDetail});\n    }\n}\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}